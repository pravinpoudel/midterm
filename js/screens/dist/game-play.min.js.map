{"version":3,"sources":["game-play.js"],"names":["GamePlay","manager","input","_classCallCheck","this","myKeyboard","lastTimeStamp","meter","marker","initialize","bind","run","checkHandler","self","register","GameState","Meter","Marker","elapsedTime","update","document","getElementById","innerHTML","score","context","clearRect","canvas","width","height","render","renderScore","checkMarker","performance","now","cancelNextRequest","requestAnimationFrame","time","font","fillText","gameLoop"],"mappings":"uZAAMA,oBACJ,SAAAA,EAAYC,EAASC,GAAOC,gBAAAC,KAAAJ,GAC1BI,KAAKC,WAAaH,EAClBE,KAAKE,cACLF,KAAKH,QAAUA,EACfG,KAAKG,MAAQ,KACbH,KAAKI,OAAS,KACdJ,KAAKK,WAAaL,KAAKK,WAAWC,KAAKN,MAPrCJ,KAAAA,IAQSI,KAAKO,IAAID,KAAKN,MACzBA,KAAKQ,aAAeR,KAAKQ,aAAaF,KAAKN,gEAI3C,IAAIS,EAAOT,KAXXS,EAAKR,WAALS,SAAA,SAAA,WACAC,UAAKT,mBAAL,EACAO,EAAKZ,QAAUA,WAAf,cAEAG,KAAKI,MAAL,IAAcQ,MACdZ,KAAKK,OAAAA,IAAaQ,4CAGnBC,GAaCd,KAAKC,WAAWc,OAAOD,kCAGlBA,GAbLd,KAAAI,OAAQW,OAARD,yCAICE,SAHDC,eAAA,gBAAAC,UAAAC,uCAqBAC,QAAQC,UAAU,EAAG,EAAGC,OAAOC,MAAOD,OAAOE,QAC7CxB,KAAKG,MAAMsB,SACXzB,KAAKI,OAAOqB,SAdZzB,KAAA0B,qDAmBG1B,KAAKG,MAAMwB,YAhBTb,KAAAA,UACLd,KAAKI,OAAOW,IAAAA,sCAIZC,IAAAA,EAASC,KAmBLf,EAAgB0B,YAAYC,MAChClB,UAAUmB,mBAAoB,EAhB9BV,KAAAA,WAAQC,SAAR,IAAwBC,KAAOC,cAa/BQ,sBAZA,SAAK5B,EAAMsB,GACXhB,EAAKL,aAAL4B,EAAA9B,GACAO,EAAKiB,OAAAA,EAALxB,GACDA,EAAA8B,EAmBGvB,EAAKgB,SACAd,UAAUmB,mBAfhBV,QAAAa,KAAA,aACFb,QAAAc,SAAA,cAAA,GAAA,KAeKH,sBAAsBI","file":"game-play.min.js","sourcesContent":["class GamePlay {\r\n  constructor(manager, input) {\r\n    this.myKeyboard = input;\r\n    this.lastTimeStamp;\r\n    this.manager = manager;\r\n    this.meter = null;\r\n    this.marker = null;\r\n    this.initialize = this.initialize.bind(this);\r\n    this.run = this.run.bind(this);\r\n    this.checkHandler = this.checkHandler.bind(this);\r\n  }\r\n\r\n  initialize() {\r\n    let self = this;\r\n    self.myKeyboard.register(\"Escape\", function () {\r\n      GameState.cancelNextRequest = true;\r\n      self.manager.showScreen(\"mainmenu\");\r\n    });\r\n    this.meter = new Meter();\r\n    this.marker = new Marker();\r\n  }\r\n\r\n  processInput(elapsedTime) {\r\n    this.myKeyboard.update(elapsedTime);\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    this.marker.update(elapsedTime)\r\n  }\r\n  \r\n  renderScore() {\r\n    document.getElementById(\"currentScore\").innerHTML = score;\r\n  }\r\n\r\n  render() {\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n    this.meter.render();\r\n    this.marker.render();\r\n    this.renderScore();\r\n  }\r\n\r\n  checkHandler(elapsedTime){\r\n    if(this.meter.checkMarker(this.marker)){\r\n      this.marker= new Marker();\r\n    }\r\n  }\r\n\r\n  run() {\r\n    let self = this;\r\n\r\n    let lastTimeStamp = performance.now();\r\n    GameState.cancelNextRequest = false;\r\n\r\n    this.myKeyboard.register(\" \", this.checkHandler )\r\n    function gameLoop(time) {\r\n      self.processInput(time - lastTimeStamp);\r\n      self.update(time - lastTimeStamp);\r\n      lastTimeStamp = time;\r\n      self.render();\r\n      if (!GameState.cancelNextRequest) {\r\n        requestAnimationFrame(gameLoop);\r\n      }\r\n      else{\r\n        context.font = '48px serif';\r\n        context.fillText('Hello world', 10, 50)\r\n        // self.manager.showScreen(\"mainmenu\");\r\n      }\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n}\r\n"]}